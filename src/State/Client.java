package State;

/**
 * State — поведенческий шаблон проектирования. Используется в тех случаях,
 когда во время выполнения программы объект должен менять своё поведение в
 зависимости от своего состояния.

 Применимость
 Когда у вас есть объект, поведение которого кардинально меняется в зависимости от
 внутреннего состояния. Причём типов состояний много и их код часто изменяется.
 Паттерн предлагает создать класс для каждого такого состояния, а затем переместить
 туда все поля и методы, связанные с состоянием. Первоначальный класс будет
 постоянно ссылаться на один из объектов-состояний, делегируя ему большую часть
 работы. Для изменения состояния, в контекст будет подставляться другой объект.
 Когда код класса содержит множество больших, похожих друг на друга, условных
 операторов, которые выбирают поведения в зависимости от текущих значений полей
 класса.
 Паттерн предлагает переместить каждую ветку такого условного оператора в
 собственный класс. Тут же можно поселить и все поля, связанные с данным
 состоянием.
 Когда вы сознательно используете табличную машину состояний, построенную на
 условных операторах, но вынуждены мириться с дублированием кода для похожих
 состояний и переходов.
 Паттерн Состояние позволяет реализовать иерархическую машину состояний,
 базирующуюся на наследовании. Вы можете отнаследовать похожие состояния от
 одного родительского класса, и вынести туда весь дублирующий код.

 Реализация
 Есть один интерфейс от которого наследуются наши 4 состояния. Есть класс "Человек" который
 может быть Азиатским мигрантом, потом Европейским и тд и в зависимости от состояния
 человека информационный метод выдает текст о его литературных вкусах.
 */

public class Client {
    public static void main(String[] args) {
        Human human = new Human();
        human.setActivity(new American());

        for(int i = 0;i<10; i++) {
            human.changeActivity();
            human.informMethod();
        }
    }
}
